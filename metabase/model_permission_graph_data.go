/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the PermissionGraphData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionGraphData{}

// PermissionGraphData struct for PermissionGraphData
type PermissionGraphData struct {
	Download map[string]interface{} `json:"download,omitempty"`
	Data     map[string]interface{} `json:"data,omitempty"`
}

// NewPermissionGraphData instantiates a new PermissionGraphData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionGraphData() *PermissionGraphData {
	this := PermissionGraphData{}
	return &this
}

// NewPermissionGraphDataWithDefaults instantiates a new PermissionGraphData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionGraphDataWithDefaults() *PermissionGraphData {
	this := PermissionGraphData{}
	return &this
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *PermissionGraphData) GetDownload() map[string]interface{} {
	if o == nil || IsNil(o.Download) {
		var ret map[string]interface{}
		return ret
	}
	return o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionGraphData) GetDownloadOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Download) {
		return map[string]interface{}{}, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *PermissionGraphData) HasDownload() bool {
	if o != nil && !IsNil(o.Download) {
		return true
	}

	return false
}

// SetDownload gets a reference to the given map[string]interface{} and assigns it to the Download field.
func (o *PermissionGraphData) SetDownload(v map[string]interface{}) {
	o.Download = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PermissionGraphData) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionGraphData) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PermissionGraphData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *PermissionGraphData) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o PermissionGraphData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionGraphData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Download) {
		toSerialize["download"] = o.Download
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullablePermissionGraphData struct {
	value *PermissionGraphData
	isSet bool
}

func (v NullablePermissionGraphData) Get() *PermissionGraphData {
	return v.value
}

func (v *NullablePermissionGraphData) Set(val *PermissionGraphData) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionGraphData) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionGraphData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionGraphData(val *PermissionGraphData) *NullablePermissionGraphData {
	return &NullablePermissionGraphData{value: val, isSet: true}
}

func (v NullablePermissionGraphData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionGraphData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
