/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the PermissionGraphData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionGraphData{}

// PermissionGraphData struct for PermissionGraphData
type PermissionGraphData struct {
	ViewData      *string                           `json:"view-data,omitempty"`
	CreateQueries *PermissionGraphDataCreateQueries `json:"create-queries,omitempty"`
}

// NewPermissionGraphData instantiates a new PermissionGraphData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionGraphData() *PermissionGraphData {
	this := PermissionGraphData{}
	return &this
}

// NewPermissionGraphDataWithDefaults instantiates a new PermissionGraphData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionGraphDataWithDefaults() *PermissionGraphData {
	this := PermissionGraphData{}
	return &this
}

// GetViewData returns the ViewData field value if set, zero value otherwise.
func (o *PermissionGraphData) GetViewData() string {
	if o == nil || IsNil(o.ViewData) {
		var ret string
		return ret
	}
	return *o.ViewData
}

// GetViewDataOk returns a tuple with the ViewData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionGraphData) GetViewDataOk() (*string, bool) {
	if o == nil || IsNil(o.ViewData) {
		return nil, false
	}
	return o.ViewData, true
}

// HasViewData returns a boolean if a field has been set.
func (o *PermissionGraphData) HasViewData() bool {
	if o != nil && !IsNil(o.ViewData) {
		return true
	}

	return false
}

// SetViewData gets a reference to the given string and assigns it to the ViewData field.
func (o *PermissionGraphData) SetViewData(v string) {
	o.ViewData = &v
}

// GetCreateQueries returns the CreateQueries field value if set, zero value otherwise.
func (o *PermissionGraphData) GetCreateQueries() PermissionGraphDataCreateQueries {
	if o == nil || IsNil(o.CreateQueries) {
		var ret PermissionGraphDataCreateQueries
		return ret
	}
	return *o.CreateQueries
}

// GetCreateQueriesOk returns a tuple with the CreateQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionGraphData) GetCreateQueriesOk() (*PermissionGraphDataCreateQueries, bool) {
	if o == nil || IsNil(o.CreateQueries) {
		return nil, false
	}
	return o.CreateQueries, true
}

// HasCreateQueries returns a boolean if a field has been set.
func (o *PermissionGraphData) HasCreateQueries() bool {
	if o != nil && !IsNil(o.CreateQueries) {
		return true
	}

	return false
}

// SetCreateQueries gets a reference to the given PermissionGraphDataCreateQueries and assigns it to the CreateQueries field.
func (o *PermissionGraphData) SetCreateQueries(v PermissionGraphDataCreateQueries) {
	o.CreateQueries = &v
}

func (o PermissionGraphData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionGraphData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ViewData) {
		toSerialize["view-data"] = o.ViewData
	}
	if !IsNil(o.CreateQueries) {
		toSerialize["create-queries"] = o.CreateQueries
	}
	return toSerialize, nil
}

type NullablePermissionGraphData struct {
	value *PermissionGraphData
	isSet bool
}

func (v NullablePermissionGraphData) Get() *PermissionGraphData {
	return v.value
}

func (v *NullablePermissionGraphData) Set(val *PermissionGraphData) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionGraphData) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionGraphData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionGraphData(val *PermissionGraphData) *NullablePermissionGraphData {
	return &NullablePermissionGraphData{value: val, isSet: true}
}

func (v NullablePermissionGraphData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionGraphData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
