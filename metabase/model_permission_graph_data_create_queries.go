/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
	"fmt"
)

// PermissionGraphDataCreateQueries - struct for PermissionGraphDataCreateQueries
type PermissionGraphDataCreateQueries struct {
	MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue *map[string]PermissionGraphDataCreateQueriesOneOfValue
	String                                                   *string
}

// map[string]PermissionGraphDataCreateQueriesOneOfValueAsPermissionGraphDataCreateQueries is a convenience function that returns map[string]PermissionGraphDataCreateQueriesOneOfValue wrapped in PermissionGraphDataCreateQueries
func MapmapOfStringPermissionGraphDataCreateQueriesOneOfValueAsPermissionGraphDataCreateQueries(v *map[string]PermissionGraphDataCreateQueriesOneOfValue) PermissionGraphDataCreateQueries {
	return PermissionGraphDataCreateQueries{
		MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue: v,
	}
}

// stringAsPermissionGraphDataCreateQueries is a convenience function that returns string wrapped in PermissionGraphDataCreateQueries
func StringAsPermissionGraphDataCreateQueries(v *string) PermissionGraphDataCreateQueries {
	return PermissionGraphDataCreateQueries{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PermissionGraphDataCreateQueries) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue)
	if err == nil {
		jsonMapmapOfStringPermissionGraphDataCreateQueriesOneOfValue, _ := json.Marshal(dst.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue)
		if string(jsonMapmapOfStringPermissionGraphDataCreateQueriesOneOfValue) == "{}" { // empty struct
			dst.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PermissionGraphDataCreateQueries)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PermissionGraphDataCreateQueries)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PermissionGraphDataCreateQueries) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue != nil {
		return json.Marshal(&src.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PermissionGraphDataCreateQueries) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue != nil {
		return obj.MapmapOfStringPermissionGraphDataCreateQueriesOneOfValue
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePermissionGraphDataCreateQueries struct {
	value *PermissionGraphDataCreateQueries
	isSet bool
}

func (v NullablePermissionGraphDataCreateQueries) Get() *PermissionGraphDataCreateQueries {
	return v.value
}

func (v *NullablePermissionGraphDataCreateQueries) Set(val *PermissionGraphDataCreateQueries) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionGraphDataCreateQueries) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionGraphDataCreateQueries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionGraphDataCreateQueries(val *PermissionGraphDataCreateQueries) *NullablePermissionGraphDataCreateQueries {
	return &NullablePermissionGraphDataCreateQueries{value: val, isSet: true}
}

func (v NullablePermissionGraphDataCreateQueries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionGraphDataCreateQueries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
