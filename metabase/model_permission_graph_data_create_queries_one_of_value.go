/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
	"fmt"
)

// PermissionGraphDataCreateQueriesOneOfValue - struct for PermissionGraphDataCreateQueriesOneOfValue
type PermissionGraphDataCreateQueriesOneOfValue struct {
	MapmapOfStringstring *map[string]string
	String               *string
}

// map[string]stringAsPermissionGraphDataCreateQueriesOneOfValue is a convenience function that returns map[string]string wrapped in PermissionGraphDataCreateQueriesOneOfValue
func MapmapOfStringstringAsPermissionGraphDataCreateQueriesOneOfValue(v *map[string]string) PermissionGraphDataCreateQueriesOneOfValue {
	return PermissionGraphDataCreateQueriesOneOfValue{
		MapmapOfStringstring: v,
	}
}

// stringAsPermissionGraphDataCreateQueriesOneOfValue is a convenience function that returns string wrapped in PermissionGraphDataCreateQueriesOneOfValue
func StringAsPermissionGraphDataCreateQueriesOneOfValue(v *string) PermissionGraphDataCreateQueriesOneOfValue {
	return PermissionGraphDataCreateQueriesOneOfValue{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PermissionGraphDataCreateQueriesOneOfValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringstring
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringstring)
	if err == nil {
		jsonMapmapOfStringstring, _ := json.Marshal(dst.MapmapOfStringstring)
		if string(jsonMapmapOfStringstring) == "{}" { // empty struct
			dst.MapmapOfStringstring = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringstring = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringstring = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PermissionGraphDataCreateQueriesOneOfValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PermissionGraphDataCreateQueriesOneOfValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PermissionGraphDataCreateQueriesOneOfValue) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringstring != nil {
		return json.Marshal(&src.MapmapOfStringstring)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PermissionGraphDataCreateQueriesOneOfValue) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringstring != nil {
		return obj.MapmapOfStringstring
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePermissionGraphDataCreateQueriesOneOfValue struct {
	value *PermissionGraphDataCreateQueriesOneOfValue
	isSet bool
}

func (v NullablePermissionGraphDataCreateQueriesOneOfValue) Get() *PermissionGraphDataCreateQueriesOneOfValue {
	return v.value
}

func (v *NullablePermissionGraphDataCreateQueriesOneOfValue) Set(val *PermissionGraphDataCreateQueriesOneOfValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionGraphDataCreateQueriesOneOfValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionGraphDataCreateQueriesOneOfValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionGraphDataCreateQueriesOneOfValue(val *PermissionGraphDataCreateQueriesOneOfValue) *NullablePermissionGraphDataCreateQueriesOneOfValue {
	return &NullablePermissionGraphDataCreateQueriesOneOfValue{value: val, isSet: true}
}

func (v NullablePermissionGraphDataCreateQueriesOneOfValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionGraphDataCreateQueriesOneOfValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
